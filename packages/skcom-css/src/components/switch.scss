////
/// **Switch**
/// A Switch toggles something on and off. It is usually in a Form Item. Unlike
/// Checkbox and Radio, a Switch is independent.
/// {@link https://m3.material.io/components/switch/guidelines#4f51b236-583e-4caa-9ae6-c8079325ef6b Learn the differences.}
///
/// @link https://docs.google.com/document/d/1UJeTpXcB2MBL9Df4GUUeZ78xb-RshNIC_-LCIKmCo-8/edit?usp=sharing#heading=h.ab4q1pg880wv SKCom documentation
////

@use "sass:math";
@use "../abstracts/mixins.scss" as mix;
@use "../components/icon.scss" as ci;

// (@SiravitPhokeed)
// I wrote the majority of this code for an unreleased version of SKCom Styles
// 2 and I tried to modernize and adapt it to fit to 3.0 standards. Let me
// know if anything is off.

// Base Switch
.skc-switch {
  @include mix.transition(
    background-color border-color,
    var(--motion-short-4),
    var(--easing-standard)
  );
  position: relative;
  width: 3.25rem;
  height: 2rem;
  border: 2px solid var(--outline);
  border-radius: var(--rounded-full);
  background-color: var(--surface-variant);
  outline: none;
  -webkit-tap-highlight-color: transparent;

  &:not([aria-disabled="true"]) {
    &:active > .skc-switch__handle {
      inset: 0 auto auto 0;
      width: 1.75rem;
      height: 1.75rem;
    }

    &:hover,
    &:focus,
    &:active {
      > .skc-switch__handle {
        background-color: var(--on-surface-variant);
      }
    }
  }

  // Disabled
  &[aria-disabled="true"] {
    cursor: default;
    opacity: 0.38;
    color: var(--on-surface);
    background-color: transparent;
    border-color: transparent;

    &::before {
      @include mix.state-layer();
      inset: -2px;
      opacity: math.div(0.12, 0.38);
      border: 2px solid var(--on-surface);
    }
  }
}

// Selected Switch
.skc-switch--selected {
  border-color: var(--primary);
  background-color: var(--primary);

  > .skc-switch__handle {
    inset: calc(0.25rem - 2px) auto auto calc(1.5rem - 2px);
    width: 1.5rem;
    height: 1.5rem;
    color: var(--on-primary-container);
    stroke: var(--on-primary-container);
    fill: var(--on-primary-container);
    background-color: var(--on-primary);
  }

  &:not([aria-disabled="true"]) {
    > .skc-switch__handle::before {
      background-color: var(--primary);
    }

    &:active > .skc-switch__handle {
      inset: 0 auto auto 1.25rem;
      width: 1.75rem;
      height: 1.75rem;
    }

    &:hover,
    &:focus,
    &:active {
      > .skc-switch__handle {
        background-color: var(--primary-container);
      }
    }
  }

  // Disabled
  &[aria-disabled="true"] {
    cursor: default;
    opacity: 0.12;
    background-color: var(--on-surface);
    border-color: var(--on-surface);

    &::before {
      display: none
    }

    > .skc-switch__handle {
      background-color: var(--surface);
      color: var(--on-surface);
    }
  }
}

// Switch handle
.skc-switch__handle {
  @include mix.transition(
    inset width height background-color,
    var(--motion-short-4),
    var(--easing-standard)
  );
  position: absolute;
  inset: calc(0.5rem - 2px) auto auto calc(0.5rem - 2px);
  display: grid;
  place-content: center;
  width: 1rem;
  height: 1rem;
  color: var(--surface-variant);
  stroke: var(--surface-variant);
  border-radius: var(--rounded-full);
  outline: none;
  fill: var(--surface-variant);
  background-color: var(--outline);

  &:has(*) {
    inset: calc(0.25rem - 2px) auto auto calc(0.25rem - 2px);
    width: 1.5rem;
    height: 1.5rem;
  }

  &::before {
    @include mix.state-layer();
    inset: 50% auto auto 50%;
    width: 2.5rem;
    height: 2.5rem;
    transform: translate(-50%, -50%);
    background-color: var(--on-surface);

    .skc-switch:not([aria-disabled="true"]):hover & {
      opacity: 0.08;
    }

    .skc-switch:not([aria-disabled="true"]):focus &,
    .skc-switch:not([aria-disabled="true"]):active & {
      opacity: 0.12;
    }
  }

  > .skc-icon {
    @include ci.icon(0, 400, 0, 20);
    font-size: 1rem;
  }
}
